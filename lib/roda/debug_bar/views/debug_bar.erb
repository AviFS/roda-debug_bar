
  <style>
    <%#= Rouge::Themes::Colorful.render(scope: '.highlight') %>
    <%#= Rouge::Themes::Github.mode(:light).render(scope: '.highlight') %>

    /* SQL syntax highlight */

    /* keywords */
    .highlight .k {
      font-weight: bold;
      color: #912520;     /* ruby-700 */
    }

    /* strings */
    .highlight .nv {
      color: #009999;
    }

    /* integers */
    .highlight .mi {
      font-weight: bold;
      color: #0086B3;
    }

    /* punctuation */
    .highlight .p {
      color: #9ca3af;
    }



    /****** ruby hash ******/

    /* strings */
    .highlight.ruby .ss {
      font-weight: bold;
      color: #912520;
    }

    .highlight.ruby .s2 {
      color: #009999;
    }

    /* integers */
    .highlight.ruby .mi {
      font-weight: normal;
      color: #0086B3;
    }

    /* punctuation */
    .highlight.ruby .p {
      color: #9ca3af;
    }


/*
    .normalize * {
      /* @apply @tailwind base;
      all: unset;
      display: block;
    }
*/


  </style>

  <!--  -->
  <link rel="stylesheet" href="/debug_bar/out.css">
  <!--  -->

  <div x-data="debugBarComponent()" x-init="init()">

    <!-- Ruby logo in lower lefthand side -->
    <div>
      <div x-show="openState == 'hidden'" class="fixed bottom-0 left-0 pb-2 pt-2 pl-2 pr-3 text-center hover:cursor-pointer border-t-4 border-ruby-600 bg-gray-200" @click="setOpenState('open')">
        <img src="/debug_bar/ruby.png" alt="Ruby" class="h-7 w-auto">
      </div>
    </div>

    <section x-show="openState != 'hidden'" class="fixed bottom-0 left-0 w-full bg-gray-200 border-t border-gray-300">
      <!-- Debug Bar -->
      <div class="w-full bg-gray-200 border-t border-gray-300">
        <!-- Tabs -->

        <div class="flex items-center bg-gray-200">

          <!-- Clickable Ruby logo to hide debug bar -->
          <div class="px-2 text-center hover:cursor-pointer" @click="setOpenState('hidden')">
            <img src="/debug_bar/ruby.png" alt="Ruby" class="h-7 w-auto">
          </div>

          <!-- Tab group for request/models/queries... -->
          <template x-for="(tab, index) in tabs" :key="index">
            <div
              @click="selectTab(index)"
              class="flex-1 py-2 text-center cursor-pointer text-sm border-t-4 transition-all"
              :class="selectedTab === index
                ? 'bg-gray-300 border-ruby-600 font-bold'
                : 'bg-gray-200 border-transparent text-gray-800'"
              x-text="tab.label">
            </div>
          </template>

          <!--
          <div class="w-16">
          </div>
          -->

          <!-- Make right bar left aligned instead -->

          <div class="flex-1 py-2 text-center text-sm border-t-4 border-transparent text-gray-800 font-mono">
            <%= relative_render('debug_bar/right_bar') %>
          </div>

          <div class="flex justify-center align-center mr-2">
            <!-- <img src="" alt="foo" srcset="" @click="setOpenState('minimized')" class="hover:cursor-pointer"> -->

            <svg @click="toggleMinimized()" class="hover:cursor-pointer size-5" :class="openState == 'minimized' ? 'rotate-180': ''"
            xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
            </svg>


            <svg @click="setOpenState('hidden')" class="hover:cursor-pointer size-5"
            xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path d="M6.28 5.22a.75.75 0 0 0-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 1 0 1.06 1.06L10 11.06l3.72 3.72a.75.75 0 1 0 1.06-1.06L11.06 10l3.72-3.72a.75.75 0 0 0-1.06-1.06L10 8.94 6.28 5.22Z" />
            </svg>



          </div>

        </div>
        <!-- Tab Content -->
        <!-- <div class="p-8 bg-gray-100 text-sm text-gray-800"> -->
        <!-- <div class="bg-gray-100 text-sm text-gray-800 h-48 overflow-y-auto"> -->
        <%#= @data.inspect %>
        <%#= @data[:request].request_method %>
        <%#= @data[:request].path %>
        <div class="bg-white text-sm text-gray-800 h-56 overflow-y-auto" x-show="openState == 'open'">
          <template x-for="(tab, index) in tabs" :key="index">
            <div x-show="selectedTab === index" x-html="tab.content"></div>
          </template>
        </div>
      </div>
    </section>
  </div>

  <script>
    function debugBarComponent() {
      return {
        selectedTab: 0,
        openState: 'open',
        tabs: [
          // Can't comment out lines with backticks or it doesn't render
          { label: 'Request', content: `<%= relative_render('debug_bar/request') %>` },
          { label: 'Models', content: `<%= relative_render('debug_bar/models') %>` },
          { label: 'Queries', content: `<%= relative_render('debug_bar/queries') %>` },
          { label: 'Messages', content: 'Debug Info for Tab 1' },
          // { label: 'Timeline', content: 'Debug Info for Tab 2' },
          // { label: 'Exceptions', content: 'Debug Info for Tab 3' },
          { label: 'Views', content: `<%= relative_render('debug_bar/views') %>` },
          { label: 'Route', content:  `<%= relative_render('debug_bar/route') %>` },
          // { label: 'Mails', content: 'Debug Info for Tab 4' },
          // { label: 'Gate', content: 'Debug Info for Tab 4' },
          { label: 'Session', content: 'Debug Info for Tab 4' },
        ],

        init() {
          this.selectedTab = parseInt(sessionStorage.getItem('debugBar.selectedTab')) || this.selectedTab;
          this.openState = sessionStorage.getItem('debugBar.openState') || this.openState;
        },

        toggleMinimized() {
          this.setOpenState(this.openState == 'minimized'? 'open': 'minimized');
        },

        setOpenState(openState) {
          this.openState = openState;
          sessionStorage.setItem('debugBar.openState', openState);
        },

        selectTab(index) {
          this.selectedTab = index;
          sessionStorage.setItem('debugBar.selectedTab', index);
        }
      };
    }
  </script>
